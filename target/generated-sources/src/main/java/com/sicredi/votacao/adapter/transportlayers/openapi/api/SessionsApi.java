/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sicredi.votacao.adapter.transportlayers.openapi.api;

import com.sicredi.votacao.adapter.transportlayers.openapi.model.Problem;
import com.sicredi.votacao.adapter.transportlayers.openapi.model.SessionInput;
import com.sicredi.votacao.adapter.transportlayers.openapi.model.SessionResult;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-03T13:01:22.826441-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "sessions", description = "the sessions API")
public interface SessionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sessions : Open a vote session
     * Open a vote session
     *
     * @param sessionInput  (optional)
     * @return Session (status code 201)
     *         or Error (status code 409)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Open a vote session", nickname = "openVoteSession", notes = "Open a vote session", response = SessionResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Session", response = SessionResult.class),
        @ApiResponse(code = 409, message = "Error", response = Problem.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @PostMapping(
        value = "/sessions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SessionResult> openVoteSession(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SessionInput sessionInput) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"durationInMinutes\" : \"durationInMinutes\", \"id\" : \"id\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
