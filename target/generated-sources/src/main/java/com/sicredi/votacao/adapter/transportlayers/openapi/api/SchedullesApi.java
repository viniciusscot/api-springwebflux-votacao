/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sicredi.votacao.adapter.transportlayers.openapi.api;

import com.sicredi.votacao.adapter.transportlayers.openapi.model.Problem;
import com.sicredi.votacao.adapter.transportlayers.openapi.model.ResultOfSchedulleResult;
import com.sicredi.votacao.adapter.transportlayers.openapi.model.SchedulleInput;
import com.sicredi.votacao.adapter.transportlayers.openapi.model.SchedulleResult;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-03T13:01:22.826441-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "schedulles", description = "the schedulles API")
public interface SchedullesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /schedulles : Create a new schedulle
     * Create a new schedulle
     *
     * @param schedulleInput  (optional)
     * @return Schedulle (status code 201)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Create a new schedulle", nickname = "createSchedulle", notes = "Create a new schedulle", response = SchedulleResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Schedulle", response = SchedulleResult.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @PostMapping(
        value = "/schedulles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SchedulleResult> createSchedulle(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SchedulleInput schedulleInput) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /schedulles/{schedulleId} : Delete a schedulle by id
     * Delete a schedulle by id
     *
     * @param schedulleId  (required)
     * @return No Content (status code 204)
     *         or Error (status code 404)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Delete a schedulle by id", nickname = "deleteSchedulle", notes = "Delete a schedulle by id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Error", response = Problem.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @DeleteMapping(
        value = "/schedulles/{schedulleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteSchedulle(@ApiParam(value = "",required=true) @PathVariable("schedulleId") String schedulleId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schedulles : Find all schedulles
     * Find all schedulles
     *
     * @return A list of associate (status code 200)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Find all schedulles", nickname = "getAllSchedulles", notes = "Find all schedulles", response = SchedulleResult.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of associate", response = SchedulleResult.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @GetMapping(
        value = "/schedulles",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SchedulleResult>> getAllSchedulles() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schedulles/{schedulleId}/results : Get results of schedulle
     * Get results of schedulle
     *
     * @param schedulleId  (required)
     * @return Result of schedulle (status code 200)
     *         or Error (status code 404)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Get results of schedulle", nickname = "getResults", notes = "Get results of schedulle", response = ResultOfSchedulleResult.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Result of schedulle", response = ResultOfSchedulleResult.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Error", response = Problem.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @GetMapping(
        value = "/schedulles/{schedulleId}/results",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ResultOfSchedulleResult>> getResults(@ApiParam(value = "",required=true) @PathVariable("schedulleId") String schedulleId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"result\", \"votesNo\" : 1, \"session\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"durationInMinutes\" : \"durationInMinutes\", \"id\" : \"id\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"votes\" : 0, \"votesYes\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schedulles/{schedulleId} : Find a schedulle by id
     * Find a schedulle by id
     *
     * @param schedulleId  (required)
     * @return Schedulle (status code 200)
     *         or Error (status code 404)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Find a schedulle by id", nickname = "getSchedulle", notes = "Find a schedulle by id", response = SchedulleResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schedulle", response = SchedulleResult.class),
        @ApiResponse(code = 404, message = "Error", response = Problem.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @GetMapping(
        value = "/schedulles/{schedulleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SchedulleResult> getSchedulle(@ApiParam(value = "",required=true) @PathVariable("schedulleId") String schedulleId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /schedulles/{schedulleId} : Update a schedulle by id
     * Update a schedulle by id
     *
     * @param schedulleId  (required)
     * @param schedulleInput  (optional)
     * @return Schedulle (status code 200)
     *         or Error (status code 404)
     *         or Error (status code 500)
     */
    @ApiOperation(value = "Update a schedulle by id", nickname = "updateSchedulle", notes = "Update a schedulle by id", response = SchedulleResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schedulle", response = SchedulleResult.class),
        @ApiResponse(code = 404, message = "Error", response = Problem.class),
        @ApiResponse(code = 500, message = "Error", response = Problem.class) })
    @PutMapping(
        value = "/schedulles/{schedulleId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SchedulleResult> updateSchedulle(@ApiParam(value = "",required=true) @PathVariable("schedulleId") String schedulleId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SchedulleInput schedulleInput) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
